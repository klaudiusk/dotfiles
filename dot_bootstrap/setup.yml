---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  vars:
    # flyctl_version: "0.1.130"
    pulumi_version: "v3.94.2"
    mattermost_install_dir: "/opt/mattermost-desktop"

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Install packages
      ansible.builtin.dnf:
        name:
          - git
          - htop
          - zoxide
          - btop
          - vim
          - firefox
          - gh
          - gnome-tweaks
          - gcc
          - helm
          - go-task
          - ripgrep
          - poetry
          - fzf
          - tmux
          - syncthing
          - ffmpeg-free
          - zlib
          - zlib-devel
          - make
          - R
          - patch
          - bzip2
          - bzip2-devel
          - readline-devel
          - sqlite
          - sqlite-devel
          - openssl-devel
          - tk-devel
          - libffi-devel
          - xz-devel
          - libuuid-devel
          - gdbm-libs
          - libnsl2
          - luarocks
          - wl-clipboard
          - fd-find
          - gcc-c++
          - doctl
          - autoconf
          - ncurses-devel
          - wxGTK-devel
          - wxBase
          - java-1.8.0-openjdk-devel
          - libiodbc
          - unixODBC-devel.x86_64
          - erlang-odbc.x86_64
          - libxslt
          - fop
          - inotify-tools
          - unar
          - neovim
          - ncdu
        state: present

    - name: Install DNF plugins core
      ansible.builtin.dnf:
        name: dnf-plugins-core
        state: present

    - name: Uninstall nano-default-editor
      ansible.builtin.dnf:
        name: nano-default-editor
        state: absent

#     - name: Import Microsoft GPG Key
#       ansible.builtin.rpm_key:
#         key: https://packages.microsoft.com/keys/microsoft.asc
#         state: present
# 
#     - name: Add Visual Studio Code Repo
#       ansible.builtin.yum_repository:
#         name: vscode
#         description: Visual Studio Code
#         baseurl: https://packages.microsoft.com/yumrepos/vscode
#         gpgkey: https://packages.microsoft.com/keys/microsoft.asc
#         gpgcheck: true
#         enabled: true
# 
#     - name: Install VS Code
#       ansible.builtin.dnf:
#         name: code
#         state: present

    - name: Add Docker repo
      ansible.builtin.yum_repository:
        name: docker
        description: Docker repo
        baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}/stable"
        gpgkey: "https://download.docker.com/linux/fedora/gpg"
        gpgcheck: true
        enabled: true

    - name: Install Docker
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        groups: docker
        append: true

#     - name: Add rtx config manager
#       ansible.builtin.yum_repository:
#         name: rtx
#         description: RTX Repo
#         baseurl: https://rtx.pub/rpm
#         gpgkey: https://rtx.pub/gpg-key.pub
#         gpgcheck: true
#         enabled: true
# 
#     - name: Install RTX
#       ansible.builtin.dnf:
#         name: rtx
#         state: present
# 
#     - name: Add kubectl repo
#       ansible.builtin.yum_repository:
#         name: Kubernetes
#         description: Kubernetes repo
#         baseurl: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
#         gpgkey: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
#         gpgcheck: true
#         enabled: true
# 
#     - name: Install kubectl
#       ansible.builtin.dnf:
#         name: kubectl
#         state: present
# 
#     - name: Add Hashicorp Repo
#       ansible.builtin.yum_repository:
#         name: hashicorp
#         description: Hashicorp repo
#         baseurl: https://rpm.releases.hashicorp.com/fedora/$releasever/$basearch/stable
#         gpgkey: https://rpm.releases.hashicorp.com/gpg
#         gpgcheck: true
#         enabled: true
# 
#     - name: Install Terraform
#       ansible.builtin.dnf:
#         name: terraform
#         state: present
# 
    - name: Check if Pulumi is installed
      ansible.builtin.command:
        cmd: pulumi version
      register: pulumi_installed
      ignore_errors: true
      changed_when: false

    - name: Download Pulumi SDK
      ansible.builtin.get_url:
        url: "https://get.pulumi.com/releases/sdk/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
        dest: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
        mode: "0644"
      when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)

    - name: Extract Pulumi to /usr/local/bin
      ansible.builtin.unarchive:
        src: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
        dest: /usr/local/bin
        extra_opts: [--strip-components=1]
        creates: /usr/local/bin/pulumi
      when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)

    - name: Check if 1Password is installed
      ansible.builtin.command: dnf list installed 1password
      register: onepassword_check
      changed_when: false
      failed_when: false

    - name: Add 1Password GPG key
      ansible.builtin.rpm_key:
        key: https://downloads.1password.com/linux/keys/1password.asc
        state: present
      when: onepassword_check.rc != 0

    - name: Add 1Password repository
      ansible.builtin.yum_repository:
        name: 1password
        description: 1Password Stable Channel
        baseurl: https://downloads.1password.com/linux/rpm/stable/$basearch
        enabled: yes
        gpgcheck: yes
        repo_gpgcheck: yes
        gpgkey: https://downloads.1password.com/linux/keys/1password.asc
      when: onepassword_check.rc != 0

    - name: Install 1Password
      ansible.builtin.dnf:
        name: 1password
        state: present
      when: onepassword_check.rc != 0

    - name: Get latest Nextcloud AppImage version
      ansible.builtin.uri:
        url: https://api.github.com/repos/nextcloud-releases/desktop/releases/latest
        return_content: yes
      register: nextcloud_latest

    - name: Check current Nextcloud version
      ansible.builtin.stat:
        path: "/usr/local/bin/nextcloud"
      register: nextcloud_stat

    - name: Get current Nextcloud version
      ansible.builtin.command: /usr/local/bin/nextcloud --version
      register: current_nextcloud_version
      when: nextcloud_stat.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Download Nextcloud AppImage
      ansible.builtin.get_url:
        url: "https://github.com/nextcloud-releases/desktop/releases/download/{{ nextcloud_latest.json.tag_name }}/Nextcloud-{{ nextcloud_latest.json.tag_name | regex_replace('^v', '') }}-x86_64.AppImage"
        dest: "/usr/local/bin/nextcloud"
        mode: '0755'
      when: not nextcloud_stat.stat.exists or (current_nextcloud_version.stdout is defined and current_nextcloud_version.stdout != nextcloud_latest.json.tag_name)

    - name: Create Nextcloud desktop entry
      ansible.builtin.template:
        src: nextcloud_desktop_entry.j2
        dest: "/usr/share/applications/nextcloud.desktop"
        mode: '0644'

    - name: Get latest PyCharm version
      ansible.builtin.uri:
        url: https://data.services.jetbrains.com/products/releases?code=PCP&latest=true&type=release
        return_content: yes
      register: pycharm_version_response

    - name: Set PyCharm version
      ansible.builtin.set_fact:
        pycharm_version: "{{ (pycharm_version_response.json.PCP | first).version }}"

    - name: Check if PyCharm is already installed
      ansible.builtin.stat:
        path: "/home/{{ remote_regular_user }}/.local/pycharm/pycharm-{{ pycharm_version }}"
      register: pycharm_check

    - name: Download and install PyCharm
      block:
        - name: Download PyCharm
          ansible.builtin.get_url:
            url: "https://download.jetbrains.com/python/pycharm-professional-{{ pycharm_version }}.tar.gz"
            dest: "/tmp/pycharm-{{ pycharm_version }}.tar.gz"

        - name: Ensure PyCharm directory exists
          ansible.builtin.file:
            path: "/home/{{ remote_regular_user }}/.local/pycharm"
            state: directory
            mode: '0755'
            owner: "{{ remote_regular_user }}"

        - name: Extract PyCharm
          ansible.builtin.unarchive:
            src: "/tmp/pycharm-{{ pycharm_version }}.tar.gz"
            dest: "/home/{{ remote_regular_user }}/.local/pycharm"
            remote_src: yes
            owner: "{{ remote_regular_user }}"

        - name: Create PyCharm desktop entry
          ansible.builtin.template:
            src: pycharm_desktop_entry.j2
            dest: "/home/{{ remote_regular_user }}/.local/share/applications/pycharm.desktop"
            mode: '0644'
            owner: "{{ remote_regular_user }}"
          vars:
            pycharm_dir: "/home/{{ remote_regular_user }}/.local/pycharm/pycharm-{{ pycharm_version }}"
      when: not pycharm_check.stat.exists

#     - name: Check if the targeted version of flyctl is installed
#       ansible.builtin.command: flyctl version
#       register: installed_flyctl_version
#       ignore_errors: true
#       changed_when: false
# 
#     - name: Download flyctl tar.gz
#       ansible.builtin.get_url:
#         url: "https://github.com/superfly/flyctl/releases/download/v{{ flyctl_version }}/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
#         dest: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
#         mode: "0644"
#       when: flyctl_version not in installed_flyctl_version.stdout
# 
#     - name: Extract flyctl to /usr/local/bin
#       ansible.builtin.unarchive:
#         src: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
#         dest: "/usr/local/bin"
#         remote_src: true
#       when: flyctl_version not in installed_flyctl_version.stdout
# 
    - name: Install Flatpak packages
      community.general.flatpak:
        name:
          - org.videolan.VLC
          - md.obsidian.Obsidian
          - org.gimp.GIMP
          - rest.insomnia.Insomnia
          - com.github.johnfactotum.Foliate
          - org.gnome.meld
          - org.sqlitebrowser.sqlitebrowser
          - org.gnome.World.PikaBackup
          - org.telegram.desktop
          - com.discordapp.Discord
          - com.slack.Slack
        state: present

    - name: Ensure fonts directory
      ansible.builtin.file:
        path: "/home/{{ remote_regular_user }}/.fonts"
        state: directory
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Check if Jetbrains Mono exists
      ansible.builtin.find:
        paths: "/home/{{ remote_regular_user }}/.fonts"
        patterns: "JetBrainsMonoNerd*FontMono*"
      register: jetbrains_mono_files
      become: false

    - name: Download Jetbrains mono
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
        dest: "/home/{{ remote_regular_user }}/.fonts/"
        remote_src: true
        mode: "0755"
        owner: "{{ remote_regular_user }}"
      when: jetbrains_mono_files.matched == 0

    - name: Get latest Mattermost Desktop version
      ansible.builtin.uri:
        url: https://api.github.com/repos/mattermost/desktop/releases/latest
        return_content: yes
      register: mattermost_latest
      become: false

    - name: Check if Mattermost is already installed
      ansible.builtin.stat:
        path: "{{ mattermost_install_dir }}/mattermost-desktop"
      register: mattermost_check

    - name: Create Mattermost installation directory
      ansible.builtin.file:
        path: "{{ mattermost_install_dir }}"
        state: directory
        mode: "0755"
      when: not mattermost_check.stat.exists

    - name: Download Mattermost tarball
      ansible.builtin.get_url:
        url: "https://releases.mattermost.com/desktop/{{ mattermost_latest.json.tag_name | regex_replace('^v', '') }}/mattermost-desktop-{{ mattermost_latest.json.tag_name | regex_replace('^v', '') }}-linux-x64.tar.gz"
        dest: "/tmp/mattermost-desktop-{{ mattermost_latest.json.tag_name | regex_replace('^v', '') }}-linux-x64.tar.gz"
        mode: '0644'
      when: not mattermost_check.stat.exists

    - name: Extract Mattermost tarball
      ansible.builtin.unarchive:
        src: "/tmp/mattermost-desktop-{{ mattermost_latest.json.tag_name | regex_replace('^v', '') }}-linux-x64.tar.gz"
        dest: "{{ mattermost_install_dir }}"
        remote_src: yes
        extra_opts: [--strip-components=1]
      when: not mattermost_check.stat.exists

    # change stuff here

    - name: Create Mattermost desktop entry
      ansible.builtin.template:
        src: mattermost_desktop_entry.j2
        dest: "/usr/share/applications/mattermost.desktop"
        mode: '0644'
      vars:
        app_name: "Mattermost"
        app_exec: "{{ mattermost_install_dir }}/mattermost-desktop"
        app_icon: "{{ mattermost_install_dir }}/app_icon.png"

    - name: Ensure Mattermost desktop entry is valid
      ansible.builtin.command: desktop-file-validate /usr/share/applications/mattermost.desktop
      changed_when: false

    - name: Update desktop database
      ansible.builtin.command: update-desktop-database
      changed_when: false

    - name: Ensure Mattermost executable has correct permissions
      ansible.builtin.file:
        path: "{{ mattermost_install_dir }}/mattermost-desktop"
        mode: '0755'

    - name: Add Zoom GPG key
      ansible.builtin.rpm_key:
        key: https://zoom.us/linux/download/pubkey
        state: present

    - name: Check if Zoom repository is already added
      ansible.builtin.stat:
        path: /etc/yum.repos.d/zoom.repo
      register: zoom_repo_check

    - name: Add Zoom repository
      ansible.builtin.yum_repository:
        name: zoom
        description: Zoom Video Communications, Inc.
        baseurl: https://rpm.zoom.us
        enabled: yes
        gpgcheck: yes
        gpgkey: https://zoom.us/linux/download/pubkey
      when: not zoom_repo_check.stat.exists

    - name: Install Zoom
      ansible.builtin.dnf:
        name: zoom
        state: present

    # set main dconf settings for Gnome
    - name: dconf settings
      block:
        - name: Input sources
          community.general.dconf:
          key: "/org/gnome/desktop/input-sources/sources"
          value: "[('xkb', 'us'), ('xkb', 'de+nodeadkeys')]"
          state: present

        - name: Set desktop monospace font to JetBrains nerdfont
          community.general.dconf:
          key: "/org/gnome/desktop/interface/monospace-font-name"
          value: "JetBrainsMono Nerd Font Mono 12"
          state: present

        - name: Alt-F1 shortcut for terminal binding
          community.general.dconf:
          key: "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/binding"
          value: "<Alt>F1"
          state: present

        - name: Alt-F1 shortcut for terminal command
          community.general.dconf:
          key: "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/command"
          value: "gnome-terminal"
          state: present

        - name: Alt-F1 shortcut for terminal name
          community.general.dconf:
          key: "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/name"
          value: "Open terminal"
          state: present

        - name: Terminal profile background color
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/background-color"
          value: "rgb(0,43,54)"
          state: present

        - name: Terminal profile bold is bright
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/bold-is-bright"
          value: "true"
          state: present

        - name: Terminal profile default size columns
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/default-size-columns
          value: "100"
          state: present

        - name: Terminal profile default size rows
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/default-size-rows"
          value: "26"
          state: present

        - name: Terminal profile font
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/font"
          value: "JetBrainsMono Nerd Font Mono 12"
          state: present

        - name: Terminal profile foreground-color
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/foreground-color"
          value: "rgb(131,148,150)"
          state: present

        - name: Terminal profile palette
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/palette"
          value: "['rgb(23,20,33)', 'rgb(226,24,39)', 'rgb(38,162,105)', 'rgb(162,115,76)', 'rgb(18,72,139)', 'rgb(163,71,186)', 'rgb(42,161,179)', 'rgb(208,207,204)', 'rgb(94,92,100)', 'rgb(246,97,81)', 'rgb(51,218,122)', 'rgb(233,173,12)', 'rgb(42,123,222)', 'rgb(192,97,203)', 'rgb(51,199,222)', 'rgb(255,255,255)']"
          state: present

        - name: Terminal profile scrollback-lines
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/scrollback-lines"
          value: "100000"
          state: present

        - name: Terminal profile use-system-font
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/use-system-font"
          value: "false"
          state: present

        - name: Terminal profile use-theme-colors
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/use-theme-colors"
          value: "false"
          state: present

        - name: Terminal profile name
          community.general.dconf:
          key: "org/gnome/terminal/legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9/visible-name"
          value: "KK-default"
          state: present
