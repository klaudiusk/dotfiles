---
- name: Server setup
  hosts: localhost
  become: false
  connection: local
  gather_facts: true
  vars:
    # Server-specific versions
    docker_compose_version: "v2.21.0"
    # Conda environments to create
    conda_environments:
      - name: "3-11"
        python_version: "3.11"
      - name: "3-12"
        python_version: "3.12"
      - name: "3-13"
        python_version: "3.13"

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    # Core system packages - Ubuntu/Debian
    - name: Install core packages on Ubuntu/Debian
      ansible.builtin.apt:
        name:
          # Core development tools
          - git
          - vim
          - neovim
          - gcc
          - g++
          - make
          - autoconf
          - patch
          - curl
          - wget
          - unzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          # System monitoring and utilities
          - htop
          - btop
          - ncdu
          - tree
          - iotop
          - nethogs
          # Shell enhancements
          - tmux
          - fzf
          - ripgrep
          - fd-find
          - bash-completion
          # Development libraries
          - bzip2
          - libbz2-dev
          - libreadline-dev
          - sqlite3
          - libsqlite3-dev
          - libssl-dev
          - libffi-dev
          - liblzma-dev
          - uuid-dev
          - libgdbm-dev
          - libnss3-dev
          - libncurses5-dev
          - libncursesw5-dev
          - libedit-dev
          - libxml2-dev
          - libxslt1-dev
          # Python development
          - python3
          - python3-dev
          - python3-pip
          - python3-venv
          - python3-psutil
          - python3-neovim
          # Additional utilities
          - wl-clipboard
          - unrar
          - rsync
          - screen
          # Security
          - unattended-upgrades
        state: present
        update_cache: yes
      become: true
      when: ansible_distribution in ['Ubuntu', 'Debian']

    # Core system packages - Fedora
    - name: Install core packages on Fedora
      ansible.builtin.dnf:
        name:
          # Core development tools
          - git
          - vim
          - neovim
          - gcc
          - gcc-c++
          - make
          - autoconf
          - patch
          - curl
          - wget
          - unzip
          # System monitoring and utilities
          - htop
          - btop
          - ncdu
          - tree
          - iotop
          # Shell enhancements
          - tmux
          - fzf
          - ripgrep
          - fd-find
          - bash-completion
          # Development libraries
          - bzip2
          - bzip2-devel
          - readline-devel
          - sqlite
          - sqlite-devel
          - openssl-devel
          - libffi-devel
          - xz-devel
          - libuuid-devel
          - gdbm-libs
          - libnsl2
          - ncurses-devel
          - libxml2-devel
          - libxslt-devel
          # Python development
          - python3
          - python3-devel
          - python3-pip
          - python3-psutil
          - python3-neovim
          # Additional utilities
          - wl-clipboard
          - unar
          - rsync
          - screen
          - zlib
          - zlib-devel
          # Tools from your original setup
          - poetry
          - zoxide
          - gh
          - helm
          - go-task
          - doctl
        state: present
      become: true
      when: ansible_distribution == 'Fedora'

    # Install Poetry on Ubuntu (not in default repos in older versions)
    - name: Install Poetry on Ubuntu
      ansible.builtin.shell: |
        curl -sSL https://install.python-poetry.org | python3 -
      args:
        creates: "{{ ansible_env.HOME }}/.local/bin/poetry"
      become: false
      when: ansible_distribution in ['Ubuntu', 'Debian']

    # Install zoxide on Ubuntu (not in default repos)
    - name: Install zoxide on Ubuntu
      block:
        - name: Download zoxide installer
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh
            dest: /tmp/install-zoxide.sh
            mode: '0755'

        - name: Install zoxide
          ansible.builtin.shell: /tmp/install-zoxide.sh
          args:
            creates: "{{ ansible_env.HOME }}/.local/bin/zoxide"
          become: false
      when: ansible_distribution in ['Ubuntu', 'Debian']

    # Install GitHub CLI on Ubuntu
    - name: Install GitHub CLI on Ubuntu
      block:
        - name: Create keyrings directory
          ansible.builtin.file:
            path: /usr/share/keyrings
            state: directory
            mode: '0755'
          become: true

        - name: Add GitHub CLI GPG key
          ansible.builtin.get_url:
            url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
            dest: /usr/share/keyrings/githubcli-archive-keyring.gpg
            mode: '0644'
          become: true

        - name: Add GitHub CLI repository
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
            state: present
          become: true

        - name: Install GitHub CLI
          ansible.builtin.apt:
            name: gh
            state: present
            update_cache: yes
          become: true
      when: ansible_distribution in ['Ubuntu', 'Debian']

    # Docker installation - Ubuntu/Debian
    - name: Install Docker on Ubuntu/Debian
      block:
        - name: Add Docker GPG key
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /usr/share/keyrings/docker-archive-keyring.gpg
            mode: '0644'
          become: true

        - name: Add Docker repository
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
          become: true

        - name: Install Docker
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
            update_cache: yes
          become: true
      when: ansible_distribution in ['Ubuntu', 'Debian']

    # Docker installation - Fedora
    - name: Install Docker on Fedora
      block:
        - name: Add Docker repo
          ansible.builtin.yum_repository:
            name: docker
            description: Docker repo
            baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}/stable"
            gpgkey: "https://download.docker.com/linux/fedora/gpg"
            gpgcheck: true
            enabled: true

        - name: Install Docker
          ansible.builtin.dnf:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
      become: true
      when: ansible_distribution == 'Fedora'

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present
      become: true

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        groups: docker
        append: true
      become: true

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      become: true

    # Install Miniconda
    - name: Set Miniconda install directory
      ansible.builtin.set_fact:
        miniconda_install_dir: "{{ ansible_env.HOME }}/.local/miniconda3"

    - name: Check if Miniconda is installed
      ansible.builtin.stat:
        path: "{{ miniconda_install_dir }}"
      register: miniconda_check
      become: false

    - name: Download Miniconda installer
      ansible.builtin.get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        dest: /tmp/miniconda.sh
        mode: '0755'
      when: not miniconda_check.stat.exists

    - name: Install Miniconda
      ansible.builtin.command:
        cmd: /tmp/miniconda.sh -b -p {{ miniconda_install_dir }}
        creates: "{{ miniconda_install_dir }}"
      become: false
      when: not miniconda_check.stat.exists

    - name: Initialize conda for bash shell
      ansible.builtin.command:
        cmd: "{{ miniconda_install_dir }}/bin/conda init bash"
      become: false
      when: not miniconda_check.stat.exists

    - name: Check existing conda environments
      ansible.builtin.find:
        paths: "{{ miniconda_install_dir }}/envs"
        file_type: directory
      register: existing_conda_envs
      become: false
      when: miniconda_check.stat.exists

    - name: Create conda environments
      ansible.builtin.command:
        cmd: "{{ miniconda_install_dir }}/bin/conda create -n {{ item.name }} python={{ item.python_version }} -y"
      become: false
      loop: "{{ conda_environments }}"
      when: >
        not miniconda_check.stat.exists or 
        (existing_conda_envs.files | default([]) | selectattr('path', 'match', '.*/' + item.name + '$') | list | length == 0)

    # Set up unattended upgrades for Ubuntu
    - name: Configure unattended upgrades settings
      ansible.builtin.copy:
        content: |
          Unattended-Upgrade::Allowed-Origins {
                  "${distro_id}:${distro_codename}-security";
                  "${distro_id}ESMApps:${distro_codename}-apps-security";
                  "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";
          Unattended-Upgrade::MinimalSteps "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "false";
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        mode: '0644'
      become: true
      when: ansible_distribution in ['Ubuntu', 'Debian']

    # Create useful directories
    - name: Create useful directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      become: false
      loop:
        - "{{ ansible_env.HOME }}/.local/bin"
        - "{{ ansible_env.HOME }}/scripts"
        - "{{ ansible_env.HOME }}/projects"

    # Install Node.js (if you need it for development)
    - name: Install Node.js on Ubuntu
      block:
        - name: Add NodeSource GPG key
          ansible.builtin.get_url:
            url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
            dest: /usr/share/keyrings/nodesource.gpg
            mode: '0644'
          become: true

        - name: Add NodeSource repository
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x {{ ansible_distribution_release }} main"
            state: present
          become: true

        - name: Install Node.js
          ansible.builtin.apt:
            name: nodejs
            state: present
            update_cache: yes
          become: true

        - name: Create npm global directory
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.npm-global"
            state: directory
            mode: '0755'
          become: false

        - name: Configure npm to use global directory
          ansible.builtin.shell: npm config set prefix '{{ ansible_env.HOME }}/.npm-global'
          become: false
      when: ansible_distribution in ['Ubuntu', 'Debian']---
